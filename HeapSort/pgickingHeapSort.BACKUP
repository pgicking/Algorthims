//PEter Gicking

#include <stdio.h>
#include <stdbool.h>
#include <stdlib.h>
#include <math.h>

struct heap
{
    int *S;
    int heapsize;
};

void siftdown(struct heap *H, int i);
int root(struct heap *H);
void removekeys(int n, struct heap *H, int S[]);
void makeheap(int n, struct heap *H);
void siftdown(struct heap *H, int i)

{
    int parent, largerchild;
    int siftkey;
    bool spotfound;

    siftkey = H->S[i];
    parent = i;
    spotfound = false;
    while(2*parent <= H->heapsize && !spotfound)
    {
        if(2*parent < H->heapsize && H->S[2*parent])
        {
            largerchild = 2*parent + 1;
        }
        else
            largerchild = 2*parent;
        if(siftkey < H->S[largerchild])
        {
            H->S[parent] = H->S[largerchild];
            parent = largerchild;
        }
        else
            spotfound = true;
    }
    H->S[parent] = siftkey; 
}

int root(struct heap *H)
{
    int keyout;

    keyout = H->S[1];
    H->S[1] = H->S[H->heapsize];
    H->heapsize = H->heapsize - 1;
    siftdown(H, 1);
    return keyout;
}

void removekeys(int n, struct heap *H, int S[]) 
{
  int i;
 
  for (i = n; i >= 0; --i) {
    S[i] = root(H);
  }
}
 
void makeheap(int n, struct heap *H) 
{
  FILE *outfile = fopen("heapsort.out", "w");
  int i;
 
  H->heapsize = n;
  for (i = floor(n/2); i >= 0; --i) {
    siftdown(H, i);
  }
 
  // Print to the output file
  for (i=0; i<n; ++i) {
    fprintf(outfile, "%d ", H->S[i]);
  }

   printf("\n\n");
  for (i=0; i<10; ++i) {
    printf("Value: %d: ", H->S[i]);
    if(i*2+1 <= 9) {
      printf("Left child: %d\n", H->S[i*2+1]);
    }
    if(i*2+2 <= 9) {
      printf("Right child: %d\n", H->S[i*2+2]);
    }
  } 
}

int main()
{
    FILE *fp, *ifp;
    fp = fopen("data1.txt","r");

    int i;
    int n;

    struct heap myHeap;

    if(!fp)
    {
        exit(1);
    }

    fscanf(fp, "%d", &n);

    myHeap.S = malloc(n*sizeof(int));

   for (i=0; i<n; ++i) 
   {
     fscanf(fp, "%d", &myHeap.S[i]);
   }

  makeheap(9, &myHeap);
  removekeys(9, &myHeap, myHeap.S);
}


