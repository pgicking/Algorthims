//CS350 Homework 4
//Student Name: Peter Gicking
//Student ID: 906600590
//Date: October 24, 2014
//Program 1 Name: Heapsort
//Algorithm 1 Name: Heapsort
//Algorithm 1 family: Divide and Conquer
//Worst Case Running Time Analysis: n lg n
//Possible Application Area: Sorting

//Code translated to C from the books psuedo code on page 309

#include <stdio.h>
#include <stdbool.h>
#include <stdlib.h>
//#include <math.h>

struct heap
{
    int *S;
    int heapsize;
};

void siftdown(struct heap *H, int i, int size);
void makeheap(int n, struct heap *H);

void siftdown(struct heap *H, int i, int size)
{
    int parent; 
    int largerchild;
    int siftkey;
    bool spotfound;
    int t;

    siftkey = H->S[i];
    parent = i;
    spotfound = false;
    while((parent*2)+1 < size)
    {
        largerchild = (2*parent) + 1;
        if(((largerchild + 1) < H->heapsize) && (H->S[largerchild] < H->S[largerchild+1]) )
        {
            largerchild += 1;
        }

        if(H->S[parent] < H->S[largerchild])
        {
            //printf("\nH->S[parent]: %d  H->[largerchild]: %d",H->S[parent],H->S[largerchild]); 
            t = H->S[parent];
            H->S[parent] = H->S[largerchild];
            H->S[largerchild] = t;
            parent = largerchild;
            //printf("\nH->S[parent]: %d  H->[largerchild]: %d",H->S[parent],H->S[largerchild]); 
        }
        else
            return;
    }
//    printf("\n");
//    for(t = 0; t < H->heapsize; ++t)
//    {
//        printf(" %d", H->S[t]);
//    }
}

 
void makeheap(int n, struct heap *H) 
{
  FILE *outfile = fopen("heapsort.out", "w");
  int i;
  int t;
  int temp;

  //H->heapsize = n;
  for (i = ((n-2)/2); i >= 0; --i) {
    siftdown(H, i,n);
  }
    
  t = H->heapsize;

  for(t < n - 1; t > 0; t--)
  {
      temp = H->heapsize;
      H->heapsize = H->S[0];
      H->S[0] = temp;
      siftdown(H,0,H->heapsize);
  }

  printf("\n\n\n");
  for (i=0; i<n; ++i) {
    fprintf(outfile, "%d ", H->S[i]);
  }

//   printf("\n\n");
//  for (i=0; i<10; ++i) {
//    printf("Value: %d: ", H->S[i]);
//    if(i*2+1 <= 9) {
//      printf("Left child: %d\n", H->S[i*2+1]);
//    }
//    if(i*2+2 <= 9) {
//      printf("Right child: %d\n", H->S[i*2+2]);
//    }
//  } 
  printf("\n\n");
}

int main()
{
    FILE *fp, *ifp;
    fp = fopen("data1.txt","r");

    int i;
    int n;

    struct heap myHeap;

    if(!fp)
    {
        exit(1);
    }

    fscanf(fp, "%d", &n);
    printf("Size of array: %d\n",n);

    myHeap.S = malloc(n*sizeof(int));
    myHeap.heapsize = n;

   for (i=0; i<n; ++i) 
   {
     fscanf(fp, "%d", &myHeap.S[i]);
     printf(" %d",myHeap.S[i]);
   }

  makeheap(n, &myHeap);
  //removekeys(n, &myHeap, myHeap.S);
}


